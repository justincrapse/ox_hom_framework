<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="promote_lod" label="Promote LOD" icon="quixel_icon">
    <script scriptType="python"><![CDATA[import random

import hou
from ox.base_objects.ox_node import OXNode
from ox import nodes


obj_node = hou.node('/obj')
hh_obj_node = OXNode(node=obj_node)
print(f'obj node: {obj_node}')
selected_nodes = hou.selectedNodes()
hh_selected_nodes = [OXNode(node=i) for i in selected_nodes]
node_names_string = '\n '.join([i.name() for i in selected_nodes])
if not selected_nodes:
    hou.ui.displayMessage(text='Must select nodes before generating scatter group instancing')
response = hou.ui.displayConfirmation(f"Nodes selected for scattering: \n{node_names_string}", title="Verify Selected Nodes")
if not response:
    exit()

parent_node = selected_nodes[0].parent()
subnetwork_node = nodes.obj_nodes.SubnetNode(node=parent_node)
master_parm = subnetwork_node.parm_template.add_int_parameter(folder_label='Transform', name='master_lod', label='Master_LOD', num_components=1)

for index, hh_node in enumerate(hh_selected_nodes):
    lod_node_name = 'LOD_Switch'
    lod_node = hh_node.get_child_by_name(child_name=lod_node_name)
    hh_lod_node = nodes.geo_nodes.SwitchNode(node=lod_node)
    hh_lod_node.parm_input = master_parm

    ]]></script>
  </tool>

  <toolshelf name="quixel_snakes" label="QuixelSnakes">
    <memberTool name="promote_lod"/>
  </toolshelf>
</shelfDocument>
