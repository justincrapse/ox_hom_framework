<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="scatter_group0" label="Scatter Group" icon="sunflower_icon.png">
    <script scriptType="python"><![CDATA[# ui: confirm selected
# create geo node
# object merge node for each selected
# create names for each based on node selected
# plug into a basic/default scatter atr from pieces
# add in a transform for good measure (after merge)

# R2:
# promote weight attributes
# promote other attrs
import random

import hou
from hou_helper.base_objects import hh_node
from hou_helper import nodes


obj_node = hou.node('/obj')
hh_obj_node = hh_node.HHNode(node=obj_node)
print(f'obj node: {obj_node}')
selected_nodes = hou.selectedNodes()
node_names_string = '\n '.join([i.name() for i in selected_nodes])
if not selected_nodes:
    hou.ui.displayMessage(text='Must select nodes before generating scatter group instancing')
response = hou.ui.displayConfirmation(f"Nodes selected for scattering: \n{node_names_string}", title="Verify Selected Nodes")
if not response:
    exit()

parent_node = selected_nodes[0].parent()
print(f'parent: {parent_node.name()}')
scatter_group_node_name = f'scatter_group{parent_node.name()}'
scatter_group_geo_node = nodes.obj_nodes.GeoNode(hh_parent=hh_obj_node, node_name=scatter_group_node_name)
scatter_group_geo_node.parm_rs_objprop_inst_packedpriminstancing = True
merge_node = nodes.geo_nodes.MergeNode(hh_parent=scatter_group_geo_node)
for index, node in enumerate(selected_nodes):
    node_path = node.path()
    node_name = node.name()
    piece_attribute = 'name'
    merge_node_name = f'merge_{node_name}'
    color_node_name = f'color_{node_name}'
    name_node_name = f'name_{node_name}'
    obj_merge_node = nodes.geo_nodes.ObjectMergeNode(hh_parent=scatter_group_geo_node, node_name=merge_node_name)
    obj_merge_node.parm_objpath1 = node_path
    name_node = nodes.geo_nodes.NameNode(hh_parent=scatter_group_geo_node)
    name_node.parm_name1 = node_name
    name_node.connect_from(hh_node=obj_merge_node)
    color_node = nodes.geo_nodes.ColorNode(hh_parent=scatter_group_geo_node, node_name=color_node_name)
    color_node.connect_from(hh_node=name_node)
    color_node.parm_colorb = random.random()
    color_node.parm_colorg = random.random()
    color_node.parm_colorr = random.random()
    merge_node.connect_from(hh_node=color_node, input_index=index)

xform_node = nodes.geo_nodes.TransformNode(hh_parent=scatter_group_geo_node)
xform_node.connect_from(hh_node=merge_node)
copy2points_node = nodes.geo_nodes.CopytopointsNode(hh_parent=scatter_group_geo_node)
copy2points_node.parm_useidattrib = True
copy2points_node.parm_idattrib_menu = piece_attribute
copy2points_node.connect_from(hh_node=xform_node)

grid_node = nodes.geo_nodes.GridNode(hh_parent=scatter_group_geo_node)
scatter_node = nodes.geo_nodes.ScatterNode(hh_parent=scatter_group_geo_node)
scatter_node.connect_from(hh_node=grid_node)
scatter_node.parm_npts = 100

attrib_from_pieces_node = nodes.geo_nodes.AttribfrompiecesNode(hh_parent=scatter_group_geo_node)
attrib_from_pieces_node.parm_pieceattrib_menu = piece_attribute
attrib_from_pieces_node.connect_from(hh_node=scatter_node)
attrib_from_pieces_node.connect_from(hh_node=xform_node, input_index=1)
copy2points_node.connect_from(hh_node=attrib_from_pieces_node, input_index=1)
copy2points_node.parm_pack = True
copy2points_node.node.setDisplayFlag(on=True)
copy2points_node.node.setRenderFlag(on=True)
]]></script>
  </tool>

  <tool name="node_class_generator" label="Node Class Generator" icon="cat_icon">
    <script scriptType="python"><![CDATA["""
This beautiful bit of code takes selected nodes and generates OX node classes for them. Also registers them in the framework for easy
importing and shorter type hinting. 
"""

import logging

import hou
from ox.base_objects.ox_node import OXNode
from ox.utils.gen_classes import gen_node_classes
from ox.utils import ui
from ox import set_log_level

ox_logger = logging.getLogger("ox_logger")

current_logging_level = ox_logger.level

node_to_folder_map = {
    "obj": "obj_nodes",
    "geo": "geo_nodes",
    "matnet": "matnet_nodes",
    "redshift_vopnet": "redshift_nodes",
    "cop2net": "cop_nodes",
}

obj_node = hou.node("/obj")
hh_obj_node = OXNode(node=obj_node)
selected_nodes = hou.selectedNodes()


for node in selected_nodes:
    parent_type = node.parent().type().name()
    node_type = node.type().name()
    if node_type == "labs::hf_combine_masks":
        ui.display_confirmation(
            f'This node type "{node_type}" should have parm "folder0" parm to at least 1. cancel to exit, otherwise accept node \
        as it is'
        )
        node.parm("folder0").set(1)
    try:
        sub_dir = node_to_folder_map[parent_type]
    except KeyError:
        raise KeyError(
            f"{parent_type} Parent type not found as a key in the node_to_folder_map. You will need to add that folder, then update the map"
        )
    set_log_level(20)
    ox_logger.info(f"Generating node class for node type: {node_type}. sub_dir: {sub_dir}")
    set_log_level(current_logging_level)
    gen_node_classes.generate_node_class(node=node, sub_dir=sub_dir)
]]></script>
  </tool>

  <toolshelf name="ox_admin" label="OX:Admin">
    <memberTool name="node_class_generator"/>
    <memberTool name="regenerate_node_classes"/>
    <memberTool name="examples"/>
    <memberTool name="sandbox"/>
  </toolshelf>

  <tool name="regenerate_node_classes" label="Regenerate Node Classes" icon="cat_blue_icon">
    <script scriptType="python"><![CDATA[import inspect
import logging
from collections import defaultdict

import hou
from ox.base_objects.ox_node import OXNode
from ox.utils.gen_classes import gen_node_classes
from ox import nodes
from ox.utils import ui

ox_logger = logging.getLogger("ox_logger")

obj_node: hou.Node = hou.node("/obj")
ox_obj_node = OXNode(node=obj_node)

node_folder_list = ["obj_nodes", "geo_nodes", "matnet_nodes", "redshift_nodes", "cop_nodes"]

node_cat_list = [i for i in dir(nodes) if not i.startswith("__")]


created_node_dict = defaultdict(list)

ui.display_confirmation(
    message="This will regenerate all existing OX Nodes. Are you sure you want to do this? Press cancel to exit code.", require_confirmation=True
)


######################################################################################################################################################
# OBJ Nodes:
node_dir = "obj_nodes"
source_node: hou.Node = obj_node
node_cat = nodes.obj_nodes

node_name_list = [i for i in dir(node_cat) if not i.startswith("__")]
node_class_list = [getattr(node_cat, i) for i in node_name_list if inspect.isclass(getattr(node_cat, i))]
for node in node_class_list:
    ox_logger.info(f"Node type: {node.node_type}")
    new_node = source_node.createNode(node.node_type)
    gen_node_classes.generate_node_class(node=new_node, sub_dir=node_dir)
    created_node_dict[node_dir].append(node.node_type)


######################################################################################################################################################
# GEO Nodes:
node_dir = "geo_nodes"
source_node = obj_node.createNode("geo")
node_cat = nodes.geo_nodes

node_name_list = [i for i in dir(node_cat) if not i.startswith("__")]
node_class_list = [getattr(node_cat, i) for i in node_name_list if inspect.isclass(getattr(node_cat, i))]
for node in node_class_list:
    ox_logger.info(f"Node type: {node.node_type}")
    new_node = source_node.createNode(node.node_type)

    # handle dynamic parms:
    if node.node_type == "labs::hf_combine_masks":
        new_node.parm("folder0").set(10)

    ox_logger.info(new_node.name())
    gen_node_classes.generate_node_class(node=new_node, sub_dir=node_dir)
    created_node_dict[node_dir].append(node.node_type)


######################################################################################################################################################
# Matnet Nodes:
node_dir = "matnet_nodes"
source_node = obj_node.createNode("matnet")
node_cat = nodes.matnet_nodes

node_name_list = [i for i in dir(node_cat) if not i.startswith("__")]
node_class_list = [getattr(node_cat, i) for i in node_name_list if inspect.isclass(getattr(node_cat, i))]
extra_node = source_node.createNode("mtlxstandard_surface")
for node in node_class_list:
    ox_logger.info(f"Node type: {node.node_type}")
    new_node = source_node.createNode(node.node_type)

    if node.node_type == "collect":
        new_node.setInput(input_index=0, item_to_become_input=extra_node, output_index=0)
        
    ox_logger.info(new_node.name())
    gen_node_classes.generate_node_class(node=new_node, sub_dir=node_dir)
    created_node_dict[node_dir].append(node.node_type)


######################################################################################################################################################
# Redshift Nodes:
node_dir = "redshift_nodes"
matnet_node = obj_node.createNode("matnet")
source_node: hou.Node = matnet_node.createNode("redshift_vopnet")
source_node.deleteItems(source_node.allItems())
node_cat = nodes.redshift_nodes

node_name_list = [i for i in dir(node_cat) if not i.startswith("__")]
node_class_list = [getattr(node_cat, i) for i in node_name_list if inspect.isclass(getattr(node_cat, i))]
for node in node_class_list:
    ox_logger.info(f"Node type: {node.node_type}")
    new_node = source_node.createNode(node.node_type)
    ox_logger.info(new_node.name())
    gen_node_classes.generate_node_class(node=new_node, sub_dir=node_dir)
    created_node_dict[node_dir].append(node.node_type)


######################################################################################################################################################
# Cop Nodes:
node_dir = "cop_nodes"
source_node: hou.Node = obj_node.createNode("cop2net")
node_cat = nodes.cop_nodes

node_name_list = [i for i in dir(node_cat) if not i.startswith("__")]
node_class_list = [getattr(node_cat, i) for i in node_name_list if inspect.isclass(getattr(node_cat, i))]
for node in node_class_list:
    ox_logger.info(f"Node type: {node.node_type}")
    new_node = source_node.createNode(node.node_type)
    ox_logger.info(new_node.name())
    gen_node_classes.generate_node_class(node=new_node, sub_dir=node_dir)
    created_node_dict[node_dir].append(node.node_type)

for key, value in created_node_dict.items():
    ox_logger.info(f"{key}: {len(value)}")
]]></script>
  </tool>

  <tool name="examples" label="Examples" icon="cat_rainbow">
    <script scriptType="python"><![CDATA[import hou
from ox import OXNode, set_log_level
from ox import nodes
from ox.helpers import ox_helper


obj_ox_node = OXNode(hou.node("/obj"))

nodes.obj_nodes.HelixNode()]]></script>
  </tool>

  <tool name="sandbox" label="SandBox" icon="pearl_icon">
    <script scriptType="python"><![CDATA[import hou
from ox import OXNode, set_log_level
from ox import nodes
from ox.helpers import ox_helper


obj_ox_node = OXNode(hou.node("/obj"))


######################################################################################################################################################
# get child nodes
# mtlx_matnet_node = obj_ox_node.get_child_node_by_name(child_name='mtlx_matnet')
# mtlx_matnet_ox_node = nodes.obj_nodes.MatnetNode(mtlx_matnet_node)

# #or
# mtlx_matnet_ox_node = obj_ox_node.get_child_ox_node_by_name('mtlx_matnet', node_class=nodes.obj_nodes.MatnetNode)

# #or
# mtlx_matnet_node = obj_ox_node.child('mtlx_matnet')
# mtlx_matnet_ox_node = nodes.obj_nodes.MatnetNode(mtlx_matnet_node)

mtlx_matnet_ox_node = obj_ox_node.ox_child('mtlx_matnet', node_class=nodes.obj_nodes.GeoNode)

mtlx_matnet_ox_node
######################################################################################################################################################

######################################################################################################################################################
# logging
# geo_ox_node: GeoNode = obj_ox_node.ox_child("geo1", GeoNode)
# geo_ox_node.load_preset()

# set_log_level(20)
# print('set to 20')

# geo_ox_node.load_preset()

# set_log_level(10)
# print('set to 10')


# geo_ox_node.load_preset()
# set_log_level(30)
######################################################################################################################################################


######################################################################################################################################################
# setting parameters
# mtlx_matnet_ox_node = obj_ox_node.get_child_ox_node_by_name(child_name="mtlx_matnet", node_class=nodes.obj_nodes.GeoNode)

# mtlx_image_ox_node = mtlx_matnet_ox_node.get_child_ox_node_by_type(node_class=nodes.matnet_nodes.MtlximageNode)
# mtlx_surface_ox_node = mtlx_matnet_ox_node.get_child_ox_node_by_type(node_class=nodes.matnet_nodes.MtlxstandardSurfaceNode)


# mtlx_image_ox_node.parm_file = "/some_dir/my_file.png"
# mtlx_image_ox_node.parm_signature.menu_float


# mtlx_image_node: hou.Node = hou.node("/obj/mtlx_matnet/mtlximage1")
# mtlx_surface_node: hou.Node = hou.node("/obj/mtlx_matnet/mtlxstandard_surface1")

# mtlx_surface_node.setInput(mtlx_surface_node.inputLabels().index("Emission Color"), mtlx_image_node)


# mtlx_image_node.parm("file").set("/some_dir/my_file.png")
# signature_parm = mtlx_image_node.parm("signature")
# float_menu_index = signature_parm.menuLabels().index("Float")
# float_menu_value = signature_parm.menuItems()[float_menu_index]
# signature_parm.set(float_menu_value)
######################################################################################################################################################


######################################################################################################################################################
# adding a parm template

# obj_ox_node = OXNode(hou.node("/obj"))

# hda_ox_node = obj_ox_node.get_child_ox_node_by_name(child_name="OX_Sandbox")

# color_pt = hda_ox_node.create_color_tuple_parm_template(name="my_color_parm", label="My Color Parm")
# hda_ox_node.add_parm_template(parm_template=color_pt, insert_after_parm="my_button", return_type="color")


# hda_node: hou.Node = hou.node("/obj/OX_Sandbox")
# color_pt = hou.FloatParmTemplate(
#     name="my_color_parm",
#     label="My Color Parm",
#     num_components=3,
#     default_value=([1, 1, 1]),
#     min=0,
#     max=1,
#     min_is_strict=False,
#     look=hou.parmLook.ColorSquare,
#     naming_scheme=hou.parmNamingScheme.RGBA,
# )
# parm_template_group: hou.ParmTemplateGroup = hda_node.parmTemplateGroup()
# parm_template_group.insertAfter("my_button", color_pt)
# hda_node.setParmTemplateGroup(parm_template_group=parm_template_group)
######################################################################################################################################################
]]></script>
  </tool>
</shelfDocument>
